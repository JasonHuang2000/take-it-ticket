type Query {
  allShift: [Shift]
  shift(query: queryShift): [Shift]
  findSeat(query: querySeat!): Seat
  allUser: [User]
  user(id: String!): User
}

type Mutation {
  createUser(data: creUser!): User
  createShift(data: creShift!): Shift
  updateSeat(data: upSeat!) : Seat
  deleteUser(id: String!): User
  deleteShift(id: Int!): Shift
}

type Subscription {
  seat: seatPayload!
}

# for mutation - create user
input creUser {
  name: String
  userid: String
  password: String
}

# for mutation - create shift
input creShift {
  trainNum: Int
  schedule: scheduleIn
  departure: String
  arrival: String
}

input scheduleIn {
  date: dateIn
  depart: timeIn
  arrive: timeIn
}

input dateIn {
  year: Int
  month: Int
  day: Int
}

input timeIn {
  hour: Int
  minute: Int
}

# for mutation - update seat
input upSeat {
  trainNum: Int
  carriage: Int
  seatNum: Int
  available: Boolean
}

# for query shift
input queryShift {
  date: dateIn
  time: timeIn
  departure: String
  arrival: String
}

# for query seat's available
input querySeat {
  trainNum: Int
  carriage: Int
  seatNum: Int
}

type User {
  name: String
  userid: String
  password: String
  history: [Record]
}

type Record {
  total: Int
  trainNum: Int
  seats: [Seat]
}

# the time and date info for a shift
type Schedule {
  date: Date
  depart: Time
  arrive: Time
}

type Date {
  year: Int
  month: Int
  day: Int
}

type Time {
  hour: Int
  minute: Int
}

type Shift {
  trainNum: Int
  schedule: Schedule
  departure: String
  arrival: String
  seats: [Seat]
}

# who preserve the seat and whether it is available
type Seat {
  carriage: Int
  seatNum: Int
  available: Boolean
}

type seatPayload {
  mutation: mutationType!
  data: Seat
}

enum mutationType {
  CREATED
  CHANGED
  DELETED
}